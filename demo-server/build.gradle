import com.typesafe.config.Config
import com.typesafe.config.ConfigFactory

group 'net.corda.demo.server'
version '1.0'

apply plugin: 'java'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile("org.springframework.boot:spring-boot-starter-web:$spring_boot_version") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
        exclude group: "org.springframework.boot", module: "spring-boot-starter-jetty"
    }
    compile "org.springframework.boot:spring-boot-starter-log4j2:$spring_boot_version"
    compile "org.apache.logging.log4j:log4j-web:2.11.0"
    cordapp project(":demo-node")
}
bootJar {
    launchScript()
    mainClassName = 'net.corda.demo.server.config.DemoCordApp'
}

// This task can made more clean and generic or customized as per requirement, though conveys the idea of reading the node.conf file and it's custom properties
task createServer(dependsOn: ['bootJar']) {
    doLast {
        def starterFileWin = new File("./build/libs/runserver.bat")
        def starterFileLinux = new File("./build/libs/runserver.sh") //Yet to be tested on Linux.
        if (starterFileWin.exists() || starterFileLinux.exists()) {
            starterFileWin.delete()
            starterFileLinux.delete()
        }
        def rootBuildFolder = "../build/node/";
        String regx = "[^A-Za-z0-9]"
        int serverPort=8080 // initial server port
        new File(rootBuildFolder).eachDir() { dir ->
            if (!dir.getName().find(regx) && !dir.getName().equalsIgnoreCase("notary")) {
                Config config = ConfigFactory.parseFile(new File(dir.getPath() + "/node.conf"));
                def rpcAddress = config.getString("rpcSettings.address");
                boolean activeService
                if(config. hasPath("activeService")){
                    activeService = config.getBoolean("activeService");
                }
                def rpcUsers = (HashMap) config.getAnyRefList("rpcUsers").get(0);
                def password = rpcUsers.get("password")
                def user = rpcUsers.get("user")
                def winCMD = "start "
                def terminal = "x-terminal-emulator -e"
                def newLine =System.getProperty("line.separator")
                String javaCommand = " java -Dnodename="+dir.getName()+
                        " -Dconfig.rpc.password="+password+
                        " -Dconfig.rpc.address="+rpcAddress+
                        " -Dconfig.rpc.username="+user+
                        " -Dserver.port="+(serverPort++)+
                        " -Dactive.service="+activeService+
                        " -jar " + bootJar.archiveName
                starterFileWin.append(winCMD+javaCommand+ newLine)
                starterFileLinux.append(terminal+javaCommand+newLine)
            }
        }
    }
}